{"version":3,"sources":["../../../../server/store/__tests__/LocalFileDatastore.js"],"names":["jest","mock","REDISCLOUD_URL","LOCAL_FILE_STORE_PATH","user_response","qid","timeOfMessage","payload","beforeAll","ensureDirSync","test","thedh","get","then","dh","Promise","all","getUserResponse","user_response_mgr","push","datastore","_scan","paths","keys","expect","toMatchObject","user_resp_mgr","del","pathExistsSync","toBe","afterAll","removeSync"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;;;AAEAA,KAAKC,IAAL,CAAU,iBAAV,EAA6B,YAAM;AACjC,SAAO;AACLC,oBAAgB,EADX;AAELC,2BAAuB;AAFlB,GAAP;AAID,CALD;;AAOA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,SAAO;AACLA,SAAKA,GADA;AAELC,mBAAe,QAFV;AAGLC,aAAS;AAHJ,GAAP;AAKD;;AAEDC,UAAU,YAAM;AACd,oBAAGC,aAAH,CAAiB,mBAASN,qBAA1B;AACD,CAFD;;AAIAO,KAAK,KAAL,EAAY,YAAM;AAChB,MAAIC,QAAQ,IAAZ;AACA,SAAO,sBAAYC,GAAZ,GACJC,IADI,CACC,UAACC,EAAD,EAAQ;AACZH,YAAQG,EAAR;AACA,WAAOC,QAAQC,GAAR,CAAY,CACjBF,GAAGG,eAAH,CAAmB,CAAnB,EACGJ,IADH,CACQ,UAACK,iBAAD,EAAuB;AAC3B,aAAOA,kBAAkBC,IAAlB,CAAuBf,cAAc,CAAd,CAAvB,CAAP;AACD,KAHH,CADiB,EAKjBU,GAAGG,eAAH,CAAmB,CAAnB,EACGJ,IADH,CACQ,UAACK,iBAAD,EAAuB;AAC3B,aAAOA,kBAAkBC,IAAlB,CAAuBf,cAAc,CAAd,CAAvB,CAAP;AACD,KAHH,CALiB,CAAZ,CAAP;AAUD,GAbI,EAcJS,IAdI,CAcC,YAAM;AACV,WAAOF,MAAMS,SAAN,CAAgBC,KAAhB,CAAsBV,MAAMS,SAAN,CAAgBE,KAAhB,CAAsBlB,aAA5C,CAAP;AACD,GAhBI,EAiBJS,IAjBI,CAiBC,UAACU,IAAD,EAAU;AACdC,WAAOD,IAAP,EAAaE,aAAb,CACE,CAAC,GAAD,EAAM,GAAN,CADF;AAGA,WAAOd,MAAMM,eAAN,CAAsB,CAAtB,CAAP;AACD,GAtBI,EAuBJJ,IAvBI,CAuBC,UAACa,aAAD,EAAmB;AACvB,WAAOA,cAAcC,GAAd,EAAP;AACD,GAzBI,EA0BJd,IA1BI,CA0BC,YAAM;AACVW,WAAO,kBAAGI,cAAH,CACF,mBAASzB,qBADP,2BAAP,EAEG0B,IAFH,CAEQ,KAFR;AAGD,GA9BI,CAAP;AA+BD,CAjCD;;AAmCAC,SAAS,YAAM;AACb,oBAAGC,UAAH,CAAc,mBAAS5B,qBAAvB;AACD,CAFD","file":"LocalFileDatastore.js","sourcesContent":["import fs from 'fs-extra';\n\nimport constant from 'common/constant';\nimport DataHandler from 'server/store/DataHandler';\n\njest.mock('common/constant', () => {\n  return {\n    REDISCLOUD_URL: '',\n    LOCAL_FILE_STORE_PATH: './var/data_test_localfiledatastore',\n  };\n});\n\nfunction user_response(qid) {\n  return {\n    qid: qid, \n    timeOfMessage: 19700101, \n    payload: 'hello'\n  };\n}\n\nbeforeAll(() => {\n  fs.ensureDirSync(constant.LOCAL_FILE_STORE_PATH);\n});\n\ntest('all', () => {\n  let thedh = null;\n  return DataHandler.get()\n    .then((dh) => {\n      thedh = dh;\n      return Promise.all([\n        dh.getUserResponse(4)\n          .then((user_response_mgr) => {\n            return user_response_mgr.push(user_response(1));\n          }),\n        dh.getUserResponse(5)\n          .then((user_response_mgr) => {\n            return user_response_mgr.push(user_response(1));\n          }),\n      ]);\n    })\n    .then(() => {\n      return thedh.datastore._scan(thedh.datastore.paths.user_response);\n    })\n    .then((keys) => {\n      expect(keys).toMatchObject(\n        ['4', '5'],\n      );\n      return thedh.getUserResponse(4);\n    })\n    .then((user_resp_mgr) => {\n      return user_resp_mgr.del();\n    })\n    .then(() => {\n      expect(fs.pathExistsSync(\n        `${constant.LOCAL_FILE_STORE_PATH}/user_response_4.json`,\n      )).toBe(false);\n    });\n});\n\nafterAll(() => {\n  fs.removeSync(constant.LOCAL_FILE_STORE_PATH);\n});\n"]}