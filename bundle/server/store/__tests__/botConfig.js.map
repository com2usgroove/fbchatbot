{"version":3,"sources":["../../../../server/store/__tests__/botConfig.js"],"names":["jest","mock","REDISCLOUD_URL","LOCAL_FILE_STORE_PATH","ACCESS_TOKEN_REAP_INTERVAL","ACCESS_TOKEN_TTL","useFakeTimers","SAMPLE_EMAIL","beforeAll","ensureDirSync","test","thedh","get","then","datahandler","expect","botConfig","config","toEqual","hello","save","data","readJsonSync","load","checkEmailForAuthorized","toBeNull","permissions","hasOwnProperty","toBeTruthy","not","advanceTimersByTime","inMemConfig","accessTokens","ttl","toBe","initInMemConfig","toContain","afterAll","removeSync"],"mappings":"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","file":"botConfig.js","sourcesContent":["import fs from 'fs-extra';\n\nimport constant from 'common/constant';\nimport DataHandler from 'server/store/DataHandler';\n\njest.mock('common/constant', () => {\n  return {\n    REDISCLOUD_URL: '',\n    LOCAL_FILE_STORE_PATH: './var/data_test_botconfig',\n    ACCESS_TOKEN_REAP_INTERVAL: 1 * 1000,\n    ACCESS_TOKEN_TTL: 2,\n  };\n});\n\njest.useFakeTimers();\n\nconst SAMPLE_EMAIL = 'liyu@fb.com';\n\nbeforeAll(() => {\n  fs.ensureDirSync(constant.LOCAL_FILE_STORE_PATH);\n});\n\ntest('save_load', () => {\n  let thedh = null;\n  return DataHandler.get()\n    .then((datahandler) => {\n      thedh = datahandler;\n      expect(thedh.botConfig.config).toEqual({});\n      thedh.botConfig.config.hello = 'world';\n      return thedh.botConfig.save();\n    })\n    .then(() => {\n      let data = fs.readJsonSync(\n        `${constant.LOCAL_FILE_STORE_PATH}/bot_config_default.json`,\n      );\n      expect(data).toEqual({ hello: 'world' });\n      return thedh.botConfig.load();\n    })\n    .then(() => {\n      expect(thedh.botConfig.config).toEqual({ hello: 'world' });\n    });\n});\n\ntest('access_token_reap', () => {\n  let thedh = null;\n  return DataHandler.get()\n    .then((datahandler) => {\n      thedh = datahandler;\n      expect(thedh.botConfig.checkEmailForAuthorized(SAMPLE_EMAIL)).toBeNull();\n      thedh.botConfig.config.permissions = {\n        [SAMPLE_EMAIL]: true,\n      };\n      return thedh.botConfig.save();\n    })\n    .then(() => {\n      expect(thedh.botConfig.config.permissions.hasOwnProperty(SAMPLE_EMAIL)).toBeTruthy();\n      expect(thedh.botConfig.checkEmailForAuthorized(SAMPLE_EMAIL)).not.toBeNull();\n      // advance half of TTL\n      jest.advanceTimersByTime(constant.ACCESS_TOKEN_TTL * 1000/2);\n      // the access_token should still there\n      expect(thedh.botConfig.inMemConfig.hasOwnProperty('accessTokens')).toBeTruthy();\n      expect(thedh.botConfig.inMemConfig.accessTokens[SAMPLE_EMAIL].hasOwnProperty('hash')).toBeTruthy();\n      // now use the access_token again, it should be reseted for TTL\n      expect(thedh.botConfig.checkEmailForAuthorized(SAMPLE_EMAIL)).not.toBeNull();\n      expect(thedh.botConfig.inMemConfig.accessTokens[SAMPLE_EMAIL].hasOwnProperty('ttl')).toBeTruthy();\n      expect(thedh.botConfig.inMemConfig.accessTokens[SAMPLE_EMAIL].ttl).toBe(constant.ACCESS_TOKEN_TTL);\n      // finally advance the time to make our access_token expire\n      jest.advanceTimersByTime(constant.ACCESS_TOKEN_TTL * 1000 + 10);\n      expect(thedh.botConfig.initInMemConfig).not.toContain('accessTokens');\n    });\n});\n\nafterAll(() => {\n  fs.removeSync(constant.LOCAL_FILE_STORE_PATH);\n});\n"]}