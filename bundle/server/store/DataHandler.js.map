{"version":3,"sources":["../../../server/store/DataHandler.js"],"names":["datahandler_singleton_promise","datahandler_singleton","DataHandler","_get","then","dh","Promise","resolve","REDISCLOUD_URL","init","storeType","datastoreType","datastore","botConfig","botAllDataUserResponse","paths","access_token","bot_config","question_flow","user_progress","user_response","user_profile","Object","keys","reduce","acc","key","LOCAL_FILE_STORE_PATH","all","load","userID","_scan"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAIA,gCAAgC,IAApC;AACA,IAAIC,wBAAwB,IAA5B;;IAEqBC,W;;;0BAEN;AACX,UAAIF,6BAAJ,EAAmC;AACjC,eAAOA,6BAAP;AACD;AACD,UAAI,CAACC,qBAAL,EAA4B;AAC1BD,wCACEE,YAAYC,IAAZ,GACGC,IADH,CACQ,UAACC,EAAD,EAAQ;AACZJ,kCAAwBI,EAAxB;AACAL,0CAAgC,IAAhC;AACA,iBAAOK,EAAP;AACD,SALH,CADF;AAOA,eAAOL,6BAAP;AACD;AACD,aAAOM,QAAQC,OAAR,CAAgBN,qBAAhB,CAAP;AACD;;;2BAEa;AACZ,UAAI,mBAASO,cAAT,IAA2B,EAA/B,EAAmC;AACjC,eAAQ,IAAIN,WAAJ,CAAgB,OAAhB,CAAD,CAA2BO,IAA3B,EAAP;AACD,OAFD,MAEO;AACL,eAAQ,IAAIP,WAAJ,CAAgB,OAAhB,CAAD,CAA2BO,IAA3B,EAAP;AACD;AACF;;;AAED,uBAAYC,SAAZ,EAAuB;AAAA;;AACrB,SAAKC,aAAL,GAAqBD,SAArB;AACA,SAAKE,SAAL,GAAiB,IAAjB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,sBAAL,GAA8B,IAA9B;AACD;;;;2BAEM;AAAA;;AACL,UAAIC,QAAQ;AACVC,sBAAc,cADJ;AAEVC,oBAAY,YAFF;AAGVC,uBAAe,eAHL;AAIVC,uBAAe,cAJL;AAKVC,uBAAe,eALL;AAMVC,sBAAc;AANJ,OAAZ;;AASA,cAAQ,KAAKV,aAAb;AACE,aAAK,OAAL;AACE,eAAKC,SAAL,GAAiB,kCAAjB;AACA,eAAKA,SAAL,CAAeG,KAAf,GAAuBO,OAAOC,IAAP,CAAYR,KAAZ,EAAmBS,MAAnB,CAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7DD,gBAAIC,GAAJ,IAAc,mBAASC,qBAAvB,SAAgDZ,MAAMW,GAAN,CAAhD;AACA,mBAAOD,GAAP;AACD,WAHsB,EAGpB,EAHoB,CAAvB;AAIA;AACF,aAAK,OAAL;AACE,eAAKb,SAAL,GAAiB,8BAAjB;AACA,eAAKA,SAAL,CAAeG,KAAf,GAAuBA,KAAvB;AACA;AAXJ;;AAcA,WAAKF,SAAL,GAAiB,qBAAc,IAAd,CAAjB;;AAEA,aAAOP,QAAQsB,GAAR,CAAY,CACjB,KAAKf,SAAL,CAAegB,IAAf,EADiB,CAAZ,EAGNzB,IAHM,CAGD,YAAM;AACV;AACD,OALM,CAAP;AAMD;;;oCAEesB,G,EAAK;AACnB,aAAQ,2BAAiB,IAAjB,CAAD,CAAyBG,IAAzB,CAA8BH,GAA9B,CAAP;AACD;;;oCAEeI,M,EAAQ;AACtB,aAAQ,2BAAiB,IAAjB,CAAD,CAAyBD,IAAzB,CAA8BC,MAA9B,CAAP;AACD;;;wCAEmB;AAClB,aAAO,KAAKlB,SAAL,CAAemB,KAAf,CAAqB,KAAKnB,SAAL,CAAeG,KAAf,CAAqBK,aAA1C,CAAP;AACD;;;oCAEeU,M,EAAQ;AACtB,aAAQ,2BAAiB,IAAjB,CAAD,CAAyBD,IAAzB,CAA8BC,MAA9B,CAAP;AACD;;;qCAEgB;AACf,aAAQ,0BAAgB,IAAhB,CAAD,CAAwBD,IAAxB,EAAP;AACD;;;mCAEcC,M,EAAQ;AACrB,aAAQ,0BAAgB,IAAhB,CAAD,CAAwBD,IAAxB,CAA6BC,MAA7B,CAAP;AACD;;;;;;kBA1FkB5B,W","file":"DataHandler.js","sourcesContent":["import AccessToken from 'server/store/accesstoken/accessToken';\nimport BotConfig from 'server/store/bot/config';\nimport constant from 'common/constant';\nimport LocalFileDataStore from 'server/store/datastore/LocalFileDatastore';\nimport QuestionFlow from 'server/store/question/questionFlow';\nimport RedisDataStore from 'server/store/datastore/RedisDatastore';\nimport UserProgress from 'server/store/user/userProgress';\nimport UserResponse from 'server/store/user/userResponse';\nimport UserProfile from 'server/store/user/userProfile';\n\nlet datahandler_singleton_promise = null;\nlet datahandler_singleton = null;\n\nexport default class DataHandler {\n\n  static get() {\n    if (datahandler_singleton_promise) {\n      return datahandler_singleton_promise;\n    }\n    if (!datahandler_singleton) {\n      datahandler_singleton_promise =\n        DataHandler._get()\n          .then((dh) => {\n            datahandler_singleton = dh;\n            datahandler_singleton_promise = null;\n            return dh;\n          });\n      return datahandler_singleton_promise;\n    }\n    return Promise.resolve(datahandler_singleton);\n  }\n\n  static _get() {\n    if (constant.REDISCLOUD_URL == '') {\n      return (new DataHandler('local')).init();\n    } else {\n      return (new DataHandler('redis')).init();\n    }\n  }\n\n  constructor(storeType) {\n    this.datastoreType = storeType;\n    this.datastore = null;\n    this.botConfig = null;\n    this.botAllDataUserResponse = null;\n  }\n\n  init() {\n    let paths = {\n      access_token: 'access_token',\n      bot_config: 'bot_config',\n      question_flow: 'question_flow',\n      user_progress: 'user_progres',\n      user_response: 'user_response',\n      user_profile: 'user_profile',\n    };\n\n    switch (this.datastoreType) {\n      case 'local':\n        this.datastore = new LocalFileDataStore();\n        this.datastore.paths = Object.keys(paths).reduce((acc, key) => {\n          acc[key] = `${constant.LOCAL_FILE_STORE_PATH}/${paths[key]}`;\n          return acc;\n        }, {});\n        break;\n      case 'redis':\n        this.datastore = new RedisDataStore();\n        this.datastore.paths = paths;\n        break;\n    }\n\n    this.botConfig = new BotConfig(this);\n\n    return Promise.all([\n      this.botConfig.load(),\n    ])\n    .then(() => {\n      return this;\n    });\n  }\n\n  getQuestionFlow(key) {\n    return (new QuestionFlow(this)).load(key);\n  }\n\n  getUserResponse(userID) {\n    return (new UserResponse(this)).load(userID);\n  }\n\n  scanUserResponses() {\n    return this.datastore._scan(this.datastore.paths.user_response);\n  }\n\n  getUserProgress(userID) {\n    return (new UserProgress(this)).load(userID);\n  }\n\n  getAccessToken() {\n    return (new AccessToken(this)).load();\n  }\n\n  getUserProfile(userID) {\n    return (new UserProfile(this)).load(userID);\n  }\n}\n"]}