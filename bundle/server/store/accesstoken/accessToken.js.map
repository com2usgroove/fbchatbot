{"version":3,"sources":["../../../../server/store/accesstoken/accessToken.js"],"names":["KEY","AccessToken","datahandler","datastore","allAccessTokens","Promise","resolve","_reject","_read","paths","access_token","then","data","JSON","parse","catch","err","error","stringify","info","_write","options","Object","assign","save","key"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA,IAAMA,MAAM,SAAZ;;IAEqBC,W;AACnB,uBAAYC,WAAZ,EAAyB;AAAA;;AACvB,SAAKC,SAAL,GAAiBD,YAAYC,SAA7B;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACD;;;;2BAEM;AAAA;;AACL,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,OAAV,EAAsB;AACvC,cAAKJ,SAAL,CAAeK,KAAf,CAAqB,MAAKL,SAAL,CAAeM,KAAf,CAAqBC,YAA1C,EAAwDV,GAAxD,EACGW,IADH,CACQ,UAACC,IAAD,EAAU;AACd,gBAAKR,eAAL,GAAuBS,KAAKC,KAAL,CAAWF,IAAX,CAAvB;AACAN;AACD,SAJH,EAKGS,KALH,CAKS,UAACC,GAAD,EAAS;AACd;AACA,2BAAOC,KAAP,qCAA+CJ,KAAKK,SAAL,CAAeF,GAAf,CAA/C;AACA,2BAAOG,IAAP,CAAY,gCAAZ;AACA,gBAAKf,eAAL,GAAuB,EAAvB;AACAE;AACD,SAXH;AAYD,OAbM,CAAP;AAcD;;;2BAEM;AAAA;;AACL,aAAO,KAAKH,SAAL,CAAeiB,MAAf,CACL,KAAKjB,SAAL,CAAeM,KAAf,CAAqBC,YADhB,EAELV,GAFK,EAGLa,KAAKK,SAAL,CAAe,KAAKd,eAApB,CAHK,EAKNO,IALM,CAKD,YAAM;AACV,yBAAOQ,IAAP,CAAY,qBAAZ;AACA;AACD,OARM,EASNJ,KATM,CASA,UAACC,GAAD,EAAS;AACd,yBAAOC,KAAP,oCAA8CJ,KAAKK,SAAL,CAAeF,GAAf,CAA9C;AACA,eAAOA,GAAP;AACD,OAZM,CAAP;AAaD;;;2BAEMK,O,EAAS;AACd,WAAKjB,eAAL,GAAuBkB,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKnB,eAAvB,EAAwCiB,OAAxC,CAAvB;AACA,aAAO,KAAKG,IAAL,EAAP;AACD;;;wBAEGC,G,EAAK;AACP,aAAQA,OAAO,KAAKrB,eAAb,GAAgC,KAAKA,eAAL,CAAqBqB,GAArB,CAAhC,GAA4D,IAAnE;AACD;;;;;;kBA9CkBxB,W","file":"accessToken.js","sourcesContent":["import logger from 'common/logger';\n\nconst KEY = 'default';\n\nexport default class AccessToken {\n  constructor(datahandler) {\n    this.datastore = datahandler.datastore;\n    this.allAccessTokens = {};\n  }\n\n  load() {\n    return new Promise((resolve, _reject) => {\n      this.datastore._read(this.datastore.paths.access_token, KEY)\n        .then((data) => {\n          this.allAccessTokens = JSON.parse(data);\n          resolve(this);\n        })\n        .catch((err) => {\n          // any error in reading access token, fallback to no accesstoken\n          logger.error(`load access_token failed with: ${JSON.stringify(err)}`);\n          logger.info('create new access_token store.');\n          this.allAccessTokens = {};\n          resolve(this);\n        });\n    });\n  }\n\n  save() {\n    return this.datastore._write(\n      this.datastore.paths.access_token,\n      KEY,\n      JSON.stringify(this.allAccessTokens),\n    )\n    .then(() => {\n      logger.info('access_token saved.');\n      return this;\n    })\n    .catch((err) => {\n      logger.error(`save access_token failed with ${JSON.stringify(err)}`);\n      return err;\n    });\n  }\n\n  update(options) {\n    this.allAccessTokens = Object.assign({}, this.allAccessTokens, options);\n    return this.save();\n  }\n\n  get(key) {\n    return (key in this.allAccessTokens) ? this.allAccessTokens[key] : null;\n  }\n}\n"]}