{"version":3,"sources":["../../../../server/authEndpoint/__tests__/lead.js"],"names":["jest","mock","ACCESS_TOKEN_TTL","ACCESS_TOKEN_REAP_INTERVAL","GRAPH_BASE_URL","REDISCLOUD_URL","LOCAL_FILE_STORE_PATH","useFakeTimers","get","fn","mockImplementation","params","Promise","resolve","reject","uri","id","name","email","console","error","sample_questions","user_response","qid","timeOfMessage","payload","port","Math","floor","random","express_server","beforeAll","ensureDirSync","outputJsonSync","test","thedh","theat","then","dh","botConfig","config","permissions","all","save","getUserResponse","user_response_mgr","push","listener","qs","userid","accesstoken","resolveWithFullResponse","resp","expect","statusCode","toBe","JSON","parse","body","access_token","headers","join","removeSync","afterAll","done","close"],"mappings":"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","file":"lead.js","sourcesContent":["import fs from 'fs-extra';\nimport request from 'request-promise';\n\nimport constant from 'common/constant';\nimport DataHandler from 'server/store/DataHandler';\nimport {start as startServer} from 'server/server';\n\njest.mock('common/constant', () => {\n  return {\n    ACCESS_TOKEN_TTL: 30 * 60, // 30 minutes of seconds\n    ACCESS_TOKEN_REAP_INTERVAL: 60 * 1000, // 1 min\n    GRAPH_BASE_URL: 'https://graph.facebook.com/v2.11',\n    REDISCLOUD_URL: '',\n    LOCAL_FILE_STORE_PATH: './var/data_test_endpoint_lead',\n  };\n});\n\njest.useFakeTimers();\n\njest.mock('common/fbrequest', () => {\n  return {\n    get: jest.fn().mockImplementation((params) => {\n      return new Promise((resolve, reject) => {\n        if (params.uri == 'https://graph.facebook.com/v2.11/4') {\n          resolve({\n            id: 4,\n            name: 'zack',\n            email: 'zack@fb.com',\n          });\n        } else {\n          console.error('get', params);\n          reject('err');\n        }\n      });\n    }),\n  };\n});\n\nlet sample_questions = [\n  {\n    'type': 'greeting',\n    'text': 'hello',\n  },\n  {\n    'type': 'question',\n    'text': 'world',\n    'options': [\n      {\n        'text': 'jedi',\n        'resp_payload': 'jedi',\n      }\n    ],\n  },\n  {\n    'type': 'input',\n    'text': 'your name',\n  },\n];\n\nfunction user_response(qid) {\n  return {\n    qid: qid, \n    timeOfMessage: 19700101, \n    payload: 'hello'\n  };\n}\n\nconst port = Math.floor(Math.random() * 10000 + 1024);\nlet express_server = null;\n\nbeforeAll(() => {\n  fs.ensureDirSync(constant.LOCAL_FILE_STORE_PATH);\n  fs.outputJsonSync(\n    `${constant.LOCAL_FILE_STORE_PATH}/question_flow_default.json`,\n    sample_questions,\n  );\n});\n\ntest('all', () => {\n  let thedh = null;\n  let theat = null;\n  return DataHandler.get()\n    .then((dh) => {\n      thedh = dh;\n      thedh.botConfig.config.permissions = {\n        'zack@fb.com': true,\n      };\n      return Promise.all([\n        thedh.botConfig.save(),\n        thedh.getUserResponse(4)\n          .then((user_response_mgr) => {\n            user_response_mgr.push(user_response(1));\n          }),\n        thedh.getUserResponse(5)\n          .then((user_response_mgr) => {\n            user_response_mgr.push(user_response(2));\n          }),\n      ]);\n    })\n    .then(() => {\n      return startServer(port);\n    })\n    .then((listener) => {\n      express_server = listener;\n      // try get without access_token\n      return request.get({\n        uri: `http://localhost:${port}/auth/fbuser`,\n        qs: {\n          userid: 4,\n          accesstoken: 'hello',\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.statusCode).toBe(200);\n      theat = JSON.parse(resp.body).access_token;\n      return request.get({\n        uri: `http://localhost:${port}/download_leads`,\n        qs: {\n          access_token: theat,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      expect(resp.headers['content-type']).toBe('text/csv; charset=utf-8');\n      expect(resp.body).toBe([\n        '\\\"uid\\\",\\\"q1\\\",\\\"payload1\\\",\\\"timeofmessage1\\\",\\\"q2\\\",\\\"payload2\\\",\\\"timeofmessage2\\\"',\n        '\\\"4\\\",\\\"1\\\",\\\"hello\\\",\\\"19700101\\\",,,',\n        '\\\"5\\\",,,,\\\"2\\\",\\\"hello\\\",\\\"19700101\\\"',\n        '',\n      ].join('\\r\\n'));\n\n      fs.removeSync(`${constant.LOCAL_FILE_STORE_PATH}/user_response_4.json`);\n      fs.removeSync(`${constant.LOCAL_FILE_STORE_PATH}/user_response_5.json`);\n      return request.get({\n        uri: `http://localhost:${port}/download_leads`,\n        qs: {\n          access_token: theat,\n        },\n        resolveWithFullResponse: true,\n      });\n    })\n    .then((resp) => {\n      // after delete all user responses, the csv file should be empty\n      expect(resp.headers['content-type']).toBe('text/csv; charset=utf-8');\n      expect(resp.body).toBe([\n        '\\\"uid\\\",\\\"q1\\\",\\\"payload1\\\",\\\"timeofmessage1\\\",\\\"q2\\\",\\\"payload2\\\",\\\"timeofmessage2\\\"',\n        '',\n      ].join('\\r\\n'));\n    });\n});\n\nafterAll((done) => {\n  express_server.close(() => {\n    fs.removeSync(constant.LOCAL_FILE_STORE_PATH);\n    done();\n  });\n});\n"]}