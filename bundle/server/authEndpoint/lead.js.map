{"version":3,"sources":["../../../server/authEndpoint/lead.js"],"names":["init","genCSVBuilder","dh","flatattr","getQuestionFlow","then","question_flow","header","questions","forEach","question","index","needNoAnswer","type","push","key","user_resps","row","Array","length","map","resp","indexOf","qid","payload","timeOfMessage","loadOneUserResponse","csv_builder","getUserResponse","user_resp_mgr","userResponses","loadAllResponsesForExport","scanUserResponses","keys","Promise","resolve","_reject","_load","callback","rest_keys","splice","app","get","req","res","csv","catch","err","error","JSON","stringify","sendStatus","LEADGENBOT_EXPORT_LEAD","status","send","all","query","getUserProgress","user_prog_mgr","progress","userProgress","response","delete","del","user_progress_mgr"],"mappings":"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","file":"lead.js","sourcesContent":["import logger from 'common/logger';\n\nimport { questionHandlerMap } from 'server/handler/questionHandlers';\nimport { fbtrEvents, fbtr } from 'common/fbtr';\n\nfunction genCSVBuilder(dh, flatattr) {\n  return dh.getQuestionFlow()\n    .then((question_flow) => {\n      let header = ['uid'];\n      question_flow.questions.forEach((question, index) => {\n        let needNoAnswer = questionHandlerMap[question.type](0, question, {})[1];\n        if (!needNoAnswer) {\n          header.push(`q${index}`);\n          header.push(`payload${index}`);\n          header.push(`timeofmessage${index}`);\n        }\n      });\n      flatattr.push(header);\n      return header;\n    })\n    .then((header) => {\n      return (key, user_resps) => {\n        let row = (new Array(header.length)).map(() => { return ''; });\n        row[0] = key;\n        user_resps.forEach((resp) => {\n          let index = header.indexOf(`q${resp.qid}`);\n          row[index] = resp.qid;\n          row[index+1] = resp.payload;\n          row[index+2] = resp.timeOfMessage;\n        });\n        flatattr.push(row);\n      };\n    });\n}\n\nfunction loadOneUserResponse(dh, key, csv_builder) {\n  return dh.getUserResponse(key)\n    .then((user_resp_mgr) => {\n      csv_builder(key, user_resp_mgr.userResponses);\n      return key;\n    });\n}\n\nfunction loadAllResponsesForExport(dh, csv_builder) {\n  return dh.scanUserResponses()\n    .then((keys) => {\n      return new Promise((resolve, _reject) => {\n        function _load(keys, callback) {\n          if (keys.length <= 0) {\n            callback();\n          } else {\n            let key = keys[0];\n            let rest_keys = keys.splice(1);\n            loadOneUserResponse(dh, key, csv_builder)\n              .then(() => {\n                _load(rest_keys, callback);\n              });\n          }\n        }\n        _load(keys, resolve);\n      });\n    });\n}\n\nexport function init(app, dh) {\n  app.get('/download_leads', (req, res) => {\n    let flatattr = [];\n    genCSVBuilder(dh, flatattr)\n      .then((csv_builder) => {\n        return loadAllResponsesForExport(dh, csv_builder);\n      })\n      .then(() => {\n        res.csv(flatattr);\n      })\n      .catch((err) => {\n        logger.error(`error while generating flat responses for export: ${JSON.stringify(err)}`);\n        res.sendStatus(500);\n      });\n    fbtr(fbtrEvents.LEADGENBOT_EXPORT_LEAD);\n  });\n\n  app.get('/lead_scan_keys', (req, res) => {\n    dh.scanUserResponses()\n      .then((keys) => {\n        res.status(200).send(keys);\n      });\n  });\n\n  app.get('/lead_with_key', (req, res) => {\n    Promise.all([\n      dh.getUserResponse(req.query.key),\n      dh.getUserProgress(req.query.key),\n    ])\n    .then(([user_resp_mgr, user_prog_mgr]) => {\n      res.status(200).send({\n        progress: user_prog_mgr.userProgress,\n        response: user_resp_mgr.userResponses\n      });\n    });\n  });\n\n  app.delete('/lead_with_key', (req, res) => {\n    dh.getUserResponse(req.query.key)\n      .then((user_resp_mgr) => {\n        return user_resp_mgr.del();\n      })\n      .then(() => {\n        return dh.getUserProgress(req.query.key);\n      })\n      .then((user_progress_mgr) => {\n        return user_progress_mgr.del();\n      })\n      .then(() => {\n        res.sendStatus(200);\n      });\n  });\n}\n"]}